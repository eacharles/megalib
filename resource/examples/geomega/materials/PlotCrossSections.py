
import ROOT as M
#from ROOT import TH1, TCanvas
#from ROOT import gSystem
#from ROOT import MGlobal, MString, MResponseMatrixO1

import inspect
from argparse import ArgumentParser
import math
from array import array


# Load MEGAlib into ROOT
M.gSystem.Load("$(MEGALIB)/lib/libMEGAlib.so")

# Initialize MEGAlib
G = M.MGlobal()
G.Initialize()


# Parse the command line
parser = ArgumentParser(description='Plot cross sections.')
parser.add_argument('-m', '--material', default='Germanium', help='The material to plot. Must one of the materials generated by MEGAlib.')

args = parser.parse_args()

if args.material != "":
  Material = M.MString(args.material)


# Create the x-axis binning 
xMin = 0.01
xMax = 10000
yMin = 0.001
yMax = 20000
yMaxScaler = 1.0
NBins = 1000
Bins = array('d', [0.0] * (NBins+1))
 
xMin = math.log(xMin);
xMax = math.log(xMax);
Dist = (xMax-xMin)/NBins;
for i in range(0, NBins+1):
  Bins[i] = math.exp(xMin+i*Dist);


# Read the cross sections
TotalRMFileName = M.MString("Xsection.Total.") + Material + M.MString(".rsp")
TotalRM = M.MResponseMatrixO1()
if TotalRM.Read(TotalRMFileName) == False:
  print("Unable to open file: {}".format(TotalRMFileName.Data()))
  exit()

Title = M.MString("Cross-sections for ") + Material
TotalRMHist = M.TH1D("Total", Title.Data(), NBins, Bins)
for b in range(1, NBins+1): 
  TotalRMHist.SetBinContent(b, TotalRM.GetInterpolated(TotalRMHist.GetBinCenter(b)*1000))

if TotalRMHist.GetBinContent(1) < 1000:
  yMaxScaler = 0.1
if TotalRMHist.GetBinContent(1) < 100:
  yMaxScaler = 0.01
  

TotalRMHist.SetMinimum(yMin)
TotalRMHist.SetMaximum(yMax*yMaxScaler)
TotalRMHist.SetLineColor(1)
TotalRMHist.SetLineWidth(5)
TotalRMHist.SetXTitle("Energy [MeV]")
TotalRMHist.SetYTitle("cross section [cm^{2}]")


PhotoRMFileName = M.MString("Xsection.Photo.") + Material + M.MString(".rsp")
PhotoRM = M.MResponseMatrixO1()
if PhotoRM.Read(PhotoRMFileName) == False:
  print("Unable to open file: {}".format(PhotoRMFileName.Data()))
  exit()

PhotoRMHist = M.TH1D("Photo", "Photo", NBins, Bins)
for b in range(1, NBins+1): 
  PhotoRMHist.SetBinContent(b, PhotoRM.GetInterpolated(PhotoRMHist.GetBinCenter(b)*1000))

PhotoRMHist.SetLineColor(4)
PhotoRMHist.SetLineWidth(5)


RayleighRMFileName = M.MString("Xsection.Rayleigh.") + Material + M.MString(".rsp")
RayleighRM = M.MResponseMatrixO1()
if RayleighRM.Read(RayleighRMFileName) == False:
  print("Unable to open file: {}".format(RayleighRMFileName.Data()))
  exit()
 
RayleighRMHist = M.TH1D("Rayleigh", "Rayleigh", NBins, Bins)
for b in range(1, NBins+1): 
  RayleighRMHist.SetBinContent(b, RayleighRM.GetInterpolated(RayleighRMHist.GetBinCenter(b)*1000))

RayleighRMHist.SetLineColor(6)
RayleighRMHist.SetLineWidth(5)


ComptonRMFileName = M.MString("Xsection.Compton.") + Material + M.MString(".rsp")
ComptonRM = M.MResponseMatrixO1()
if ComptonRM.Read(ComptonRMFileName) == False:
  print("Unable to open file: {}".format(ComptonRMFileName.Data()))
  exit()
 
ComptonRMHist = M.TH1D("Compton", "Compton", NBins, Bins)
for b in range(1, NBins+1): 
  ComptonRMHist.SetBinContent(b, ComptonRM.GetInterpolated(ComptonRMHist.GetBinCenter(b)*1000))

ComptonRMHist.SetLineColor(2)
ComptonRMHist.SetLineWidth(5)


PairRMFileName = M.MString("Xsection.Pair.") + Material + M.MString(".rsp")
PairRM = M.MResponseMatrixO1()
if PairRM.Read(PairRMFileName) == False:
  print("Unable to open file: {}".format(PairRMFileName.Data()))
  exit()
 
PairRMHist = M.TH1D("Pair", "Pair", NBins, Bins)
for b in range(1, NBins+1): 
  PairRMHist.SetBinContent(b, PairRM.GetInterpolated(PairRMHist.GetBinCenter(b)*1000))

PairRMHist.SetLineColor(M.kGreen+2)
PairRMHist.SetLineWidth(5)


Canvas = M.TCanvas("Cross sections", "Cross sections", 2000, 1400)
Canvas.SetLogx()
Canvas.SetLogy()
Canvas.SetGridx()
Canvas.SetGridy()
Canvas.cd()
TotalRMHist.Draw("HIST ][")
PhotoRMHist.Draw("HIST SAME ][")
RayleighRMHist.Draw("HIST SAME ][")
ComptonRMHist.Draw("HIST SAME ][")
PairRMHist.Draw("HIST SAME ][")
Canvas.Update()


xStart = 120.0
yStart = 4000.0*yMaxScaler
Scaler = 3.1
TotalText = M.TLatex(xStart, yStart, "Total")
TotalText.SetTextFont(M.gStyle.GetTitleFont("X"))
TotalText.SetTextSize(M.gStyle.GetTitleSize("X"))
TotalText.Draw("SAME")
  
PhotoText = M.TLatex(xStart, yStart/Scaler, "Photo effect");
PhotoText.SetTextFont(M.gStyle.GetTitleFont("X"));
PhotoText.SetTextSize(M.gStyle.GetTitleSize("X"))
PhotoText.SetTextColor(4);
PhotoText.Draw("SAME");

RayleighText = M.TLatex(xStart, yStart/Scaler/Scaler,"Rayleigh scattering");
RayleighText.SetTextFont(M.gStyle.GetTitleFont("X"));
RayleighText.SetTextSize(M.gStyle.GetTitleSize("X"))
RayleighText.SetTextColor(6);
RayleighText.Draw("SAME");

ComptonText = M.TLatex(xStart, yStart/Scaler/Scaler/Scaler, "Compton scattering");
ComptonText.SetTextFont(M.gStyle.GetTitleFont("X"));
ComptonText.SetTextSize(M.gStyle.GetTitleSize("X"))
ComptonText.SetTextColor(2);
ComptonText.Draw("SAME");

PairText = M.TLatex(xStart, yStart/Scaler/Scaler/Scaler/Scaler, "Pair creation");
PairText.SetTextFont(M.gStyle.GetTitleFont("X"));
PairText.SetTextSize(M.gStyle.GetTitleSize("X"))
PairText.SetTextColor(M.kGreen+2);
PairText.Draw("SAME");

Canvas.Update()

Canvas.Connect("M.TCanvas", "Closed()", "M.TApplication", M.gApplication, "Terminate()");


# Prevent the canvases from being closed
import os
print("ATTENTION: Please exit by clicking: File -> Close ROOT! Do not just close the window by clicking \"x\"")
print("           ... and if you didn't honor this warning, and are stuck, execute the following in a new terminal: kill " + str(os.getpid()))
M.gApplication.Run()

